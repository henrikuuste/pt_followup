@startuml
App -> Window : setup
App -> Scene : load
loop unit closed
  App -> Scene : update
  activate Scene
  Scene -> ThreadPool : create thread
  ThreadPool -> PathTracer : run tracer
  activate PathTracer
  Scene -> App : return
  PathTracer --> GUI : progress
  PathTracer --> Scene : done (image)
  destroy PathTracer
  Scene --> App : notify
  deactivate Scene
  App -> Window : clear
  App -> Scene : render
  activate Scene
  Scene --> Scene : swapBuffer (conditional)
  Scene -> Window : draw OpenGL
  deactivate Scene
  App -> GUI : render
  App -> Window : display
  App -> App : handle events
  App -> App : increment frame
end
@enduml

@startuml
PathTracer -- Scene
PathTracer -- Camera
Scene *-- Object
Object *-- Material
PathTracer -- AppContext
Material -- Sampler
Material -- MaterialSample
Camera .. Ray
Material .. Ray
Scene .. Intersection
Object .. Intersection

class Pixel {
  Vec2 xy;
  Color4 color;
}

class Radiance {
  float r, g, b;
}

class AppContext {
  int frame;
  float renderProgress;
  float exposure;
  int max_depth;
  std::map<std::string, bool> features;
}

class Scene {
  std::vector<Object> objects
  Intersection intersect(Ray const &r) const;
}

class Intersection {
  float distance;
  Object const* object;
  Vec3 x;
  Vec3 n;
  ' Vec3 dudp, dvdp; Tangents
  ' Vec2 uv; Texture lookup coordinates
  bool valid() const;
  bool operator<(Intersection const &other) const;
}

class Camera {
  Vec3 pos;
  Vec3 dir;
  float w, h;
  float fov;
  Ray castRay(Vec2 const &coord) const;
}

enum ObjectType {
  SPHERE,
  PLANE,
}

class Object {
  ObjectType type;
  Vec3 pos;
  float radius;
  Material mat;
  Intersection intersect(Ray const &r) const;
}


class Material {
  Radiance Le(Intersection const &i, Ray const &wo) const;
  MaterialSample sample(Intersection const &i, Ray const &wo) const;
}

class Sampler {
  float sample1D();
  Vec2 sample2D();
  Vec3 sample3D();
}

class MaterialSample {
  Radiance fr;
  Ray wi;
  float pdf;
}

class Ray {
  Vec3 origin;
  Vec3 dir;

  int depth;
}

class PathTracer {
  std::vector<Pixel> render(Scene const &scene, Camera const &cam, AppContext &ctx);
  Radiance trace(Ray const &ray) const;
}

' class Path {
'   std::vector<Bounce> vertices
' }

' Path *-- Bounce

' class Bounce {

' }

' PathTracer -- PathIntegrator
' PathIntegrator -- Path
@enduml